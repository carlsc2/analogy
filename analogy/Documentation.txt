Analogy Generation Engine
Author: Craig Carlson

==== Purpose ====
This is a data exploration tool designed to automatically generate analogies between different domains.
A domain is simply a collection of data related to a particular topic.
See the "Data Management" section for details on the file format.

==== Overview ====
== Package Overview ==

The Analogy package is structured as follows:

Analogy/
	data files/
	domainDB/
		__init__.py
		database.py
		knowledge.py
		models.py
	utils/
		__init__.py
		DBpediaCrawler.py
		utils.py
	__init__.py
	analogy.py
	analogytest.py


The main logic for making analogies is contained in "analogy.py".
For more details about the analogy making process, see the "Algorithm Overview" section.





== Algorithm Overview ==

In this system, analogies are made between two domains.
All that is required to construct a domain is a list of concepts and their relationships to other concepts.
Essentially, a domain is just a labeled directed graph; each concept is a node, each relationship is an edge.

Any given analogy can be seen as a mapping between a source concept in a source domain to a target concept in a target domain.

The analogy-making process can be broken down into three main steps:
1) preprocessing

The preprocessing step involves taking the graph data and converting it to vector representations.
Each type of relationship (each distinct edge label) is assigned a vector.
Each node is then assigned a vector based on its relationships.
An implementation of this process is provided via the Domain class found in "utils.py", though it would be sufficient to use alternate graph embedding methods.

In addition to computing the vectors, the Domain class also computes some other metadata.
In general, any computations involved in the analogy generation



2) match hypothesis generation

For a given analogy, the input consists of: 


3) one-to-one mapping









==== Data Management ====
This package provides utilities to manage data for the purposes of analogy making.
"utils.py" defines the Domain class, which is the required input for analogy-making functions.









This package also provides tools for fetching data.

"DBpediaCrawler.py" 





